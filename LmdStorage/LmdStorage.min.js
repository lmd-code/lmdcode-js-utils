"use strict";class LmdStorage{constructor(storeKey,mapKey="_map"){this.storeName=storeKey,this.mapKey=mapKey,this.data=this.getStore(),this._isEnabled=null}get isEnabled(){if(void 0===this._isEnabled||null===this._isEnabled)try{const testKey="_lmdstorage_test",testValue="LmdStorage Test";localStorage.setItem(testKey,testValue),localStorage.getItem(testKey)===testValue?(localStorage.removeItem(testKey),this._isEnabled=!0):this._isEnabled=!1}catch(e){this._isEnabled=!1}return this._isEnabled}get count(){return void 0===this.data||null===this.data?0:this.data.size}getStore(){let savedData;try{savedData=localStorage.getItem(this.storeName)}catch(e){console.warn("Could not get saved data, a blank store has been created.")}return this.mapify(savedData)}setStore(){try{localStorage.setItem(this.storeName,this.jsonify(this.data))}catch(e){console.warn("Could not save data.")}}getItem(key){return this.data.get(key)}getItems(){return this.mapify(this.jsonify(this.data))}setItem(key,val,noSave=!1){this.data.set(key,val),noSave||this.setStore()}setItems(objData,noSave=!1){let setCount=0;for(const prop in objData)objData.hasOwnProperty(prop)&&(this.data.set(prop,objData[prop]),setCount++);setCount>0&&!noSave&&this.setStore()}removeItem(key,noSave=!1){this.data.delete(key)&&!noSave&&this.setStore()}removeItems(keys,noSave=!1){let delCount=0;for(let i=0;i<keys.length;i++)this.data.delete(keys[i])&&delCount++;delCount>0&&!noSave&&this.setStore()}saveAll(mapObj=null){if(null!==mapObj&&mapObj instanceof Map){this.data.clear();for(const[key,value]of mapObj)this.data.set(key,value)}this.setStore(),this.getStore()}clearAll(){this.data.clear();try{localStorage.clear(this.storeName)}catch(e){console.warn("Could not clear stored data.")}}jsonify(mapObj){if(mapObj instanceof Map)try{const jsonStr=JSON.stringify(mapObj,(key,value)=>value instanceof Map?{[this.mapKey]:Array.from(value.entries())}:value);if(void 0!==jsonStr)return jsonStr}catch(e){console.warn("Could not create JSON string.")}return"{}"}mapify(jsonStr){if(null!=jsonStr&&""!==jsonStr)try{const mapObj=JSON.parse(jsonStr,(key,value)=>"object"==typeof value&&null!==value&&value.hasOwnProperty(this.mapKey)?new Map(value[this.mapKey]):value);if(mapObj instanceof Map)return mapObj}catch(e){console.warn("Could not parse JSON string.")}return new Map}}